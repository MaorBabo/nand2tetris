// bootstrap code
@256
D=A
M=M+1
M=M-1
@SP
M=D
M=M
// call command:
@Main&Sys.init0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
// label command:
(Main&Sys.init0)
// function command:
(Main.fibonacci)
M=M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
M=M
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
M=M
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D-M
@IS_LESS11
D;JGT
@FALSE11
0;JMP
(IS_LESS11)
@SP
A=M
M=-1
@END11
0;JMP
(FALSE11)
@SP
A=M
M=0
(END11)
@SP
M=M+1
M=M
// if-goto command:
@SP
AM=M-1
D=M
@Main&IF_TRUE
M=M+1
M=M-1
D;JNE
M=M
// goto command:
@Main&IF_FALSE
0;JMP
M=M
// label command:
(Main&IF_TRUE)
M=M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
M=M
// return command:
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
M=M+1
M=M-1
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
M=M+1
M=M-1
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
M=M+1
M=M-1
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
M=M+1
M=M-1
@R14
A=M
0;JMP
M=M
// label command:
(Main&IF_FALSE)
M=M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
M=M
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
M=M
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
M=M
// call command:
@Main&Main.fibonacci1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
// label command:
(Main&Main.fibonacci1)
M=M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
M=M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
M=M
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
M=M
// call command:
@Main&Main.fibonacci2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
// label command:
(Main&Main.fibonacci2)
M=M
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
M=M
// return command:
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
M=M+1
M=M-1
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
M=M+1
M=M-1
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
M=M+1
M=M-1
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
M=M+1
M=M-1
@R14
A=M
0;JMP
M=M
// bootstrap code
@256
D=A
M=M+1
M=M-1
@SP
M=D
M=M
// call command:
@Sys&Sys.init0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
// label command:
(Sys&Sys.init0)
// function command:
(Sys.init)
M=M
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
M=M
// call command:
@Sys&Main.fibonacci1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
// label command:
(Sys&Main.fibonacci1)
M=M
// label command:
(Sys&WHILE)
M=M
// goto command:
@Sys&WHILE
0;JMP
M=M

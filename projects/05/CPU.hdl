// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// determine the instruction (A or C):
	Not(in=instruction[15] ,out=instructionA);
	
	// check if we need to go to A:
	And(a=instruction[15] ,b=instruction[5] ,out=gotoA);
	
	// if we need to go to A and the command is an A command we need to load register A:
	Or(a=gotoA ,b=instructionA ,out=loadAregister);
	
	// decide if to execute ALU output or the instruction:
	Mux16(a=instruction ,b=ALUout ,sel=gotoA ,out=command);
	
	// load the A register and provide the address for PC,ALU and the address for the memory:
	ARegister(in=command ,load=loadAregister ,out=registerAout, out[0..14]=addressM);
	
	Mux16(a=registerAout ,b=inM ,sel=instruction[12] ,out=ALUin);
	
	// calculate the provided command:
	ALU(x=ALUinD, y=ALUin,
	zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	f=instruction[7],
	no=instruction[6],
	out=ALUout,
	zr=isEqZero, ng=isLoZero);
	
	// return the outM
	Not16(in=ALUout ,out=nALUout);
	Not16(in=nALUout ,out=outM);
	
	// load the D register if needed:
	And(a=instruction[15] ,b=instruction[4] ,out=gotoD);
	DRegister(in=ALUout ,load=gotoD ,out=ALUinD);
	
	// check if need to write something to memory:
	And(a=instruction[3] ,b=instruction[15] ,out=writeM);
	
	// implement jump logic:
	Not(in=isEqZero ,out=neqZero);
	Not(in=isLoZero ,out=nloZero);
	And(a=neqZero ,b=nloZero ,out=isGrZero);
	
	
	And(a=instruction[0] ,b=isGrZero ,out=jgratZ);
	And(a=instruction[1] ,b=isEqZero ,out=jeqZ);
	And(a=instruction[2] ,b=isLoZero ,out=jloZ);
	
	// choose one loader:
	Or(a=jeqZ ,b=jloZ ,out=jloeqZ);
	Or(a=jloeqZ ,b=jgratZ ,out=jmpA);
	And(a=instruction[15] ,b=jmpA ,out=load);
	
	// the inc parameter is allways true because the PC prioritize the registerAout.
	PC(in=registerAout ,load=load ,inc=true ,reset=reset ,out[0..14]=pc);
}
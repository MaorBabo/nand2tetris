// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
	// determine the instruction (A or C):
	Not(in=instruction[15] ,out=instructionA);
	
	// check if we need to go to A:
	And(a=instruction[15] ,b=instruction[5] ,out=gotoA);
	
	// if we need to go to A and the command is an A command we need to load register A:
	Or(a=gotoA ,b=instructionA ,out=loadAregister);
	
	// decide if to execute ALU output or the instruction:
	Mux16(a=instruction ,b=ALUout ,sel=gotoA ,out=command);
	
	// load the A register and provide the address for PC,ALU and the address for the memory:
	ARegister(in=command ,load=loadAregister ,out=registerAout, out[0..14]=addressM);
	
	Mux16(a=registerAout ,b=inM ,sel=instruction[12] ,out=ALUin);
	
	// calculate the provided command:
	ExtendAlu(x=ALUinD, y=ALUin, instruction=instruction[6..14], out=ALUout, zr=isEqZero, ng=isLoZero);
	
	// return the outM
	Not16(in=ALUout ,out=nALUout);
	Not16(in=nALUout ,out=outM);
	
	// load the D register if needed:
	And(a=instruction[15] ,b=instruction[4] ,out=gotoD);
	DRegister(in=ALUout ,load=gotoD ,out=ALUinD);
	
	// check if need to write something to memory:
	And(a=instruction[3] ,b=instruction[15] ,out=writeM);
	
	// implement jump logic:
	Not(in=isEqZero ,out=neqZero);
	Not(in=isLoZero ,out=nloZero);
	And(a=neqZero ,b=nloZero ,out=isGrZero);
	
	
	And(a=instruction[0] ,b=isGrZero ,out=jgratZ);
	And(a=instruction[1] ,b=isEqZero ,out=jeqZ);
	And(a=instruction[2] ,b=isLoZero ,out=jloZ);
	
	// choose one loader:
	Or(a=jeqZ ,b=jloZ ,out=jloeqZ);
	Or(a=jloeqZ ,b=jgratZ ,out=jmpA);
	And(a=instruction[15] ,b=jmpA ,out=load);
	
	// the inc parameter is allways true because the PC prioritize the registerAout.
	PC(in=registerAout ,load=load ,inc=true ,reset=reset ,out[0..14]=pc);
}
